name: ci

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            preset: linux
            artifact: LizardHook-linux-x64.tar.gz
            ext: tar.gz
          - os: macos-latest
            preset: macos
            artifact: LizardHook-macos.zip
            ext: zip
          - os: windows-latest
            preset: win-mingw
            artifact: LizardHook-win-x64.zip
            ext: zip
    steps:
      - uses: actions/checkout@v4

      - name: Setup prerequisites (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build xorg-dev libxi-dev libxrandr-dev libxinerama-dev libxcursor-dev libx11-dev libxext-dev libasound2-dev

      - name: Setup prerequisites (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ninja || true

      - name: Setup MinGW (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-ninja

      - name: Configure
        run: cmake --preset ${{ matrix.preset }} -DLIZARD_EMBED_ASSETS=ON
        shell: bash

      - name: Build
        run: cmake --build build/${{ matrix.preset }} --config Release
        shell: bash

      - name: Test
        run: ctest --test-dir build/${{ matrix.preset }} --output-on-failure
        shell: bash

      - name: Install
        run: cmake --install build/${{ matrix.preset }} --prefix install/${{ matrix.preset }}
        shell: bash

      - name: Package
        run: |
          cd install/${{ matrix.preset }}
          if [ "${{ matrix.ext }}" = "tar.gz" ]; then
            tar czf ../../${{ matrix.artifact }} *
          else
            zip -r ../../${{ matrix.artifact }} *
          fi
        shell: bash

      - name: Verify linkage
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            ldd install/${{ matrix.preset }}/LizardHook || true
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            otool -L install/${{ matrix.preset }}/LizardHook || true
          else
            dumpbin /DEPENDENTS install/${{ matrix.preset }}/LizardHook.exe || true
          fi
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version
        id: ver
        run: echo "version=$(cat VERSION)" >> "$GITHUB_OUTPUT"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: LizardHook-*
          path: dist
          merge-multiple: true

      - name: Generate changelog
        run: |
          prev_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          git log ${prev_tag}..HEAD --pretty=format:'- %s' > changelog.md

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          name: Lizard Hook v${{ steps.ver.outputs.version }}
          body_path: changelog.md
          files: |
            dist/LizardHook-win-x64.zip
            dist/LizardHook-macos.zip
            dist/LizardHook-linux-x64.tar.gz

